{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["fp64ifyMatrix4","fp64Utils","GPUGridAggregator","aggregationData","maxData","pixelIndex","length","PIXEL_SIZE","index","cellCount","cellWeight","totalCount","maxCellWieght","countsData","size","numCells","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","fp64","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","_hasGPUSupport","FEATURES","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","gridAggregationModel","allAggregationModel","meanTransform","position64Buffer","delete","deleteResources","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","log","warn","runAggregationOnCPU","obj","name","Object","assign","DEFAULT_RUN_PARAMS","gridTransformMatrix","viewport","projectPoints","changeFlags","DEFAULT_CHANGE_FLAGS","cellSizeChanged","setState","validateProps","viewportMatrix","IDENTITY_MATRIX","normalizeWeightParams","result","DEFAULT_WEIGHT_PARAMS","updateObject","dataChanged","viewportChanged","width","height","Math","ceil","positions","projectPositions","results","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","WEIGHT_SIZE","AGGREGATION_OPERATION","SUM","MEAN","MIN","min","MAX","max","validCellIndices","forEach","needMin","needMax","minData","maxMinData","calculateMinMax","calculateMean","combineMaxMin","count","ELEMENTCOUNT","weight","aggregationSize","fill","Infinity","initCPUResults","gridTransformRequired","shouldTransformToGrid","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","calculateAggregationData","calculateMeanMaxMinData","updateAggregationBuffers","createBufferObjects","bufferName","data","aggregationTexture","aggregationBuffer","readPixelsToBuffer","buffer","type","GL","FLOAT","maxMinBuffer","minBuffer","maxBuffer","Model","vs","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","drawMode","POINTS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","isInstanced","instanceCount","attributes","position","Buffer","update","Transform","TRANSFORM_MEAN_VS","_targetTextureVarying","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","bind","clear","COLOR_BUFFER_BIT","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","getMeanTransform","run","attach","COLOR_ATTACHMENT0","updateModels","setupFramebuffers","renderAggregateData","getAggregateData","framebufferSize","resize","EQUATION_MAP","getAggregationModel","getAllAggregationModel","Array","isArray","constructor","typedArray","setData","positions64xyLow","aggregationModelAttributes","createPos64xyLow","setupModels","setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Transform, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from '../../../utils/assert';\nimport {fp64 as fp64Utils, withParameters} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  AGGREGATION_OPERATION,\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {\n  getFloatTexture,\n  getFramebuffer,\n  getFloatArray,\n  updateBuffer\n} from './gpu-grid-aggregator-utils.js';\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, pixelIndex}) {\n    assert(aggregationData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = aggregationData[index + 3];\n    const cellWeight = aggregationData[index];\n    const totalCount = maxData[3];\n    const maxCellWieght = maxData[0];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer}) {\n  //   const agrData = aggregationBuffer.getData();\n  //   for (let index = 0; index < agrData.length; index += 4) {\n  //     if (agrData[index + 3] > 0) {\n  //       console.log(\n  //         `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //           agrData[index + 2]\n  //         } count: ${agrData[index + 3]}`\n  //       );\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      position64Buffer,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    position64Buffer && position64Buffer.delete();\n    this.deleteResources(framebuffers);\n    this.deleteResources(maxMinFramebuffers);\n    this.deleteResources(minFramebuffers);\n    this.deleteResources(maxFramebuffers);\n    this.deleteResources(meanTextures);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  // Common methods\n\n  deleteResources(obj) {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  // validate and assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    assert(changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged);\n\n    // assert for required options\n    assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport need only when performing screen space aggregation (projectPoints is true)\n    assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      updateBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        updateBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = framebuffers[id].readPixelsToBuffer({\n        buffer: weights[id].aggregationBuffer, // update if a buffer is provided\n        type: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = maxMinFramebuffers[id].readPixelsToBuffer({\n          buffer: weights[id].maxMinBuffer, // update if a buffer is provided\n          type: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = minFramebuffers[id].readPixelsToBuffer({\n            buffer: weights[id].minBuffer, // update if a buffer is provided\n            type: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = maxFramebuffers[id].readPixelsToBuffer({\n            buffer: weights[id].maxBuffer, // update if a buffer is provided\n            type: GL.FLOAT\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    return this.getAggregateData(opts);\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          maxMinFramebuffers[id] =\n            maxMinFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxMinFb`});\n        } else {\n          if (needMin) {\n            minFramebuffers[id] =\n              minFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-minFb`});\n          }\n          if (needMax) {\n            maxFramebuffers[id] =\n              maxFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxFb`});\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this.getAllAggregationModel(fp64);\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          weightAttributes[id] = new Buffer(this.gl, typedArray);\n        }\n      } else {\n        // assert((values instanceof Attribute) || (values instanceof Buffer));\n        assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      // positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer\n      });\n      this.setState({positionsBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      this.gridAggregationModel.setVertexCount(vertexCount);\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this.setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}